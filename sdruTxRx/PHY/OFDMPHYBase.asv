classdef OFDMPHYBase < matlab.System
    % Untitled5 Add summary here
    %
    % This template includes the minimum set of functions required
    % to define a System object with discrete state.
    
    properties
        % Public, tunable properties.
    end
    
    properties (DiscreteState)
    end
    
    properties (Access = private)
        % Objects
        hPreambleDemod
        hDataDemod
        
        
        % Pre-computed constants.
        numFreqToAverage = 15;
        FFTLength = 64;
        samplingFreq = 5e6;
        numProcessed = 0;
        
        % Timing Recovery Tunable
        PeakThreshold = 0.6
        requiredPeaks = 7;
    end
    
    methods (Access = protected)
        
        %%%%%%%%%%%% FREQUENCY CORRECTION %%%%%%%%%%%%%
        function rFreqShifted = coarseOFDMFreqEst( obj, rFrame )
            % coarseOFDMFreqEst: Frequency Correction based on the Schmidl and Cox
            % method, utilizing halves of the short preamble from the 802.11a standard
            L=obj.FFTLength/2;
            P = sum( conj(rFrame(1:L)  ) .* rFrame(1+L:L*2)  ); %Cross-correlate preamble
            phi = angle(P); % Determine phase angle between preamble halves
            
            if obj.numProcessed < obj.numFreqToAverage% Buffer not full
                obj.frequency(obj.numProcessed) = phi/(2*pi*L/obj.samplingFreq); % Convert angle to frequency
            else
                obj.frequency = [obj.frequency(2:end);0];
                obj.frequency(end) = phi/(2*pi*L/obj.samplingFreq);
            end
            
            % Apply frequency estimate
            rFreqShifted = freqCorrectOFDM( rFrame, obj.numFreqToAverage  );
            
        end
        
        function rFreqShifted = freqCorrectOFDM( obj, rFrame )
            % freqCorrectOFDM: Apply frequency offset to input signal, this offset can
            % be generated through a moving average if enabled
            
            % Enable moving averages for estimates
            if obj.numProcessed < obj.numFreqToAverage % Buffer not full
                
                frequencyMA = mean(obj.frequency(1:obj.numProcessed));
                
                % Apply frequency correction
                t = 0: 1/obj.samplingFreq : (length(rFrame)-1)/obj.samplingFreq;
                rFreqShifted = exp(1i*frequencyMA*t.').*rFrame;
                
            else % Full buffer
                
                frequencyMA = mean(obj.frequency);
                
                % Apply frequency correction
                t = 0: 1/tx.samplingFreq : (length(rFrame)-1)/obj.samplingFreq;
                rFreqShifted = exp(1i*frequencyMA*t.').*rFrame;
                
            end
            
        end
        
        %%%%%%%%%%%%%%%%%%%%% TIMING SYNC %%%%%%%%%%%%%%%%%%%%%%%%
        function [preambleEstimatedLocation, numPeaks ] = locateOFDMFrame_sdr( obj, shortPreambleOFDM, recv)
            % locateOFDMFrame: Locate 802.11a based preamble from input data stream.
            % It is assumed that the received signal is still in the time domain.  The
            % location of the start of the preamble will be returned, if not found -1
            % is returned
            
            %% Timing Estimate
            windowLength = ceil(length(recv)/4);
            L = obj.FFTLength;
            K = obj.FFTLength/4; % Quarter of short preamble sequence
            known = shortPreambleOFDM(1:K);
            
            % Cross correlate
            rWin = recv(1:windowLength-L+K-1);
            Phat = xcorr(rWin,conj(known));
            Rhat = xcorr(abs(rWin).^2,ones(K,1)); % moving average
            
            % Remove leading and tail zeros overlaps
            PhatShort = Phat(ceil(length(Phat)/2):end-K/2+1);
            RhatShort = Rhat(ceil(length(Rhat)/2):end-K/2+1);
            
            % Calculate timing metric
            M = abs(PhatShort).^2 ./ RhatShort.^2;
            
            % Determine start of short preamble
            [preambleEstimatedLocation, numPeaks] = locateShortpreamble( M, K );
            
        end
        
        
        function [preambleEstimatedLocation, numPeaks] = locateShortpreamble( M, K )
            %#codegen
            % Locate of the start of the actual preamble from timing metric
            
            %% Find peaks of correlation
            
            % Adjust threshold
            thresholdNorm = max(M)*obj.PeakThreshold;
            MLocations = find(M>thresholdNorm);
            
            % Correct estimate to start of preamble not its center
            MLocations = MLocations - (K/2+1);
            
            % Frame Detection
            peaks = zeros(size(MLocations));
            
            % Determine correct peak
            desiredPeakLocations = (16:16:128).';% Based on preamble structure
            for i = 1:length(MLocations)
                MLocationGuesses = MLocations(i)+desiredPeakLocations;
                peaks(i) = length(intersect(MLocations(i:end),MLocationGuesses));
            end
            
            % Have at least N peaks for positive match
            peaks(peaks < obj.requiredPeaks) = 0;
            
            % Pick earliest peak in time
            if ~isempty(peaks)
                [numPeaks, frontPeakLocation] = max(peaks);
                if ~isempty(frontPeakLocation) && ( numPeaks > 0 )
                    preambleEstimatedLocation = MLocations(frontPeakLocation);
                else
                    preambleEstimatedLocation = -1; % no desirable location found
                end
            else
                preambleEstimatedLocation = -1;
                numPeaks = 0;
            end
            % Normalize max peaks found
            numPeaks = numPeaks/numel(desiredPeakLocations);
            
            
        end
        %%%%%%%%%%%%%%%% EQUALIZER %%%%%%%%%%%%%%%%%%%
        function [R, Rraw] = equalizeOFDM( recv )
            %#codegen
            % equalizeOFDM: Equalize the entire OFDM frame through the use of both
            % the long preamble from the 802.11a standard and four pilot tones in
            % the data frames themselves.  The gains from the pilots are
            % interpolated across frequency to fill the data frame and apply gains
            % to all data subcarriers.
            
            %% Use Long Preamble frame to estimate channel in frequency domain
            % Separate out received preambles
            rLong = recv(length(obj.completeShortPreambleOFDM)+1 : length(obj.completeShortPreambleOFDM)+length(obj.completeLongPreambleOFDM));
            rLongFirst = rLong(33:32+length(tx.longPreambleOFDM));
            rLongSecond = rLong(33+length(obj.longPreambleOFDM) : 32+length(obj.longPreambleOFDM)*2);
            
            % Demod
            RLongFirst = step(obj.hPreambleDemod, rLongFirst); %First half of long preamble
            RLongSecond = step(obj.hPreambleDemod, rLongSecond); %Second half of long preamble
            
            %% Preamble Equalization
            % Get Equalizer tap gains
            preambleEqGains = preambleFDE([RLongFirst, RLongSecond], [tx.longPreamble, tx.longPreamble], obj.hDataDemod);
            
            % Separate data from preambles
            %recvData = recv(length(tx.preambles)+1:length(tx.preambles)+(hDataDemod.NumSymbols)*(tx.FFTLength+hDataDemod.CyclicPrefixLength));
            recvData = recv(320+1:1280); % CG
            
            % OFDM Demod
            [Rraw, RXPilots] = step(obj.hDataDemod, recvData);
            
            % Expand equalizer gains to full frame size
            preambleGainsFull = repmat(preambleEqGains ,1 , obj.hDataDemod.NumSymbols);
            
            % Isolate pilot gains from preamble equalizer
            preamblePilotGains = preambleGainsFull(obj.pilotLocationsWithoutGuardbands,:); % Needed to correctly adjust pilot gains
            
            % Apply preamble equalizer gains to data and pilots
            RXPilots = preamblePilotGains.*RXPilots; %Correct pilots
            R = preambleGainsFull(tx.dataSubcarrierIndexies,:).*Rraw;%Correct data
            
            %% Pilot Equalization
            % Get pilot-based equalizer gains
            pilotEqGains = pilotFDE(RXPilots, tx.pilots, 12);
            
            % Apply Equalizer from Pilots
            R = pilotEqGains.*R;
            
            % Save Gains for visualization
            estimate.pilotEqGains = pilotEqGains;
            estimate.preambleEqGains = preambleEqGains;
            
            
        end
        
        % Calculate Equalizer Taps with preamble symbols
        function RGains = preambleFDE(R, Known, hDataDemod)
            
            % Calculate non-normalized channel gains
            R = R(1:(hDataDemod.FFTLength-sum(hDataDemod.NumGuardBandCarriers)),1:2);
            RNormal = R./Known; % Known is the original Long Preamble symbols
            
            % Scale channel gains
            REnergy = mean(abs(RNormal).^2,2);
            RConj = conj(mean(RNormal,2));
            RGains = RConj./ REnergy;
            
        end
        
        % Calculate Equalizer Taps with pilot symbols
        function PilotGainsFull = pilotFDE(rxPilots, txPilots, upSampleFactor)
            
            % Calculate non-normalized channel gains
            PilotNormal = rxPilots./txPilots;
            
            % Scale channel gains
            PilotEnergy = abs(PilotNormal).^2;
            PilotConj = conj(PilotNormal);
            PilotGains = PilotConj./ PilotEnergy;
            
            % Interpolate to data carrier size
            PilotGainsFull = resample(PilotGains, upSampleFactor, 1);
            
        end
        
        
        
    end
end
